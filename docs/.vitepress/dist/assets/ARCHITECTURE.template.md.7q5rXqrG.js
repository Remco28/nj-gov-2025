import{_ as a,c as t,o as i,ae as o}from"./chunks/framework.CBTkueSR.js";const u=JSON.parse('{"title":"Architecture Overview (Template)","description":"","frontmatter":{},"headers":[],"relativePath":"ARCHITECTURE.template.md","filePath":"ARCHITECTURE.template.md"}'),s={name:"ARCHITECTURE.template.md"};function n(r,e,l,c,d,p){return i(),t("div",null,[...e[0]||(e[0]=[o(`<h1 id="architecture-overview-template" tabindex="-1">Architecture Overview (Template) <a class="header-anchor" href="#architecture-overview-template" aria-label="Permalink to &quot;Architecture Overview (Template)&quot;">​</a></h1><p>This template provides a fast, 2–3 minute overview of a system. Keep it short, focus on how components relate, and avoid implementation detail. Replace bracketed placeholders like [PROJECT_NAME] and [SERVICE_A] with your project’s terms.</p><h2 id="system-components" tabindex="-1">System Components <a class="header-anchor" href="#system-components" aria-label="Permalink to &quot;System Components&quot;">​</a></h2><h3 id="core-services" tabindex="-1">Core Services <a class="header-anchor" href="#core-services" aria-label="Permalink to &quot;Core Services&quot;">​</a></h3><ul><li><strong>[SERVICE_A]</strong> (<code>[path/to/service_a]</code>) – Short purpose one-liner.</li><li><strong>[SERVICE_B]</strong> (<code>[path/to/service_b]</code>) – Short purpose one-liner.</li></ul><h3 id="supporting-services-as-applicable" tabindex="-1">Supporting Services (as applicable) <a class="header-anchor" href="#supporting-services-as-applicable" aria-label="Permalink to &quot;Supporting Services (as applicable)&quot;">​</a></h3><ul><li><strong>Database</strong> – e.g., PostgreSQL/SQLite; primary data store for [DOMAIN].</li><li><strong>Cache</strong> – e.g., Redis, for hot paths only (optional).</li><li><strong>Message Broker</strong> – e.g., RabbitMQ/Kafka for async events (optional).</li></ul><h3 id="process-architecture" tabindex="-1">Process Architecture <a class="header-anchor" href="#process-architecture" aria-label="Permalink to &quot;Process Architecture&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[Service A Process]      [Service B Process]</span></span>
<span class="line"><span>       |                        |</span></span>
<span class="line"><span>       +----- Shared Data ------+</span></span>
<span class="line"><span>       |                        |</span></span>
<span class="line"><span>       +----- External APIs ----+</span></span></code></pre></div><p>Note: Prefer separate processes for clear scaling and fault isolation.</p><h2 id="data-flow-examples" tabindex="-1">Data Flow Examples <a class="header-anchor" href="#data-flow-examples" aria-label="Permalink to &quot;Data Flow Examples&quot;">​</a></h2><h3 id="example-creating-a-domain-object" tabindex="-1">Example: Creating a [DOMAIN_OBJECT] <a class="header-anchor" href="#example-creating-a-domain-object" aria-label="Permalink to &quot;Example: Creating a [DOMAIN_OBJECT]&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Client → [Service A] → validate → persist → notify [Service B]/users (if applicable)</span></span></code></pre></div><h3 id="example-updating-a-domain-object" tabindex="-1">Example: Updating a [DOMAIN_OBJECT] <a class="header-anchor" href="#example-updating-a-domain-object" aria-label="Permalink to &quot;Example: Updating a [DOMAIN_OBJECT]&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Client → [Service B] → check auth/ownership → update → emit event → [Service A] reacts</span></span></code></pre></div><p>Keep 1–3 concrete flows here that capture the “essence” of the system.</p><h2 id="key-abstractions" tabindex="-1">Key Abstractions <a class="header-anchor" href="#key-abstractions" aria-label="Permalink to &quot;Key Abstractions&quot;">​</a></h2><ul><li><strong>Entities/Aggregates</strong>: [Entity_A], [Entity_B]; relationships and lifecycle (open → closed, etc.).</li><li><strong>Boundaries</strong>: API surface, UI/WebApp, background jobs/workers.</li><li><strong>Events (optional)</strong>: [event.name] – who emits, who consumes, why.</li></ul><h2 id="authentication-authorization-optional" tabindex="-1">Authentication &amp; Authorization (Optional) <a class="header-anchor" href="#authentication-authorization-optional" aria-label="Permalink to &quot;Authentication &amp; Authorization (Optional)&quot;">​</a></h2><ul><li>User identity: e.g., JWT/session/cookie or platform-provided (Telegram/Slack/etc.).</li><li>Trust boundaries: public client vs server-only secrets; never expose server tokens to clients.</li><li>Roles/permissions (if any): [admin], [member], etc.</li></ul><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><ul><li>Central settings module/file: <code>[path/to/config]</code> with env-driven configuration.</li><li>Typical envs: <code>LOG_LEVEL</code>, <code>[SERVICE]_URL</code>, <code>DATABASE_URL</code>/<code>DB_PATH</code>, <code>ALLOWED_ORIGINS</code>, <code>ADMIN_USER_IDS</code>.</li><li>Prefer explicit, documented envs over ad-hoc flags.</li></ul><h2 id="integration-points" tabindex="-1">Integration Points <a class="header-anchor" href="#integration-points" aria-label="Permalink to &quot;Integration Points&quot;">​</a></h2><ul><li><strong>Database</strong>: single source of truth for [DOMAIN]; write patterns and read models (brief).</li><li><strong>External APIs</strong>: list by name; note retry/backoff, timeouts, and error handling stance.</li><li><strong>Messaging</strong>: topics/queues (if used); idempotency keys and at-least-once handling.</li></ul><h2 id="runtime-operations-notes" tabindex="-1">Runtime &amp; Operations Notes <a class="header-anchor" href="#runtime-operations-notes" aria-label="Permalink to &quot;Runtime &amp; Operations Notes&quot;">​</a></h2><ul><li>Processes: [Service A] and [Service B] run separately; communicate via DB/HTTP/queue.</li><li>Defaults: ports (e.g., 8080), bind addresses (e.g., 127.0.0.1 in dev), reverse proxy in prod.</li><li>Concurrency: keep transactions short; connection-per-thread/process; WAL or proper isolation for multi-process DB access.</li><li>Security: input validation; signed tokens/sessions; secret storage via env/secret manager; treat notification failures as best-effort unless critical.</li><li>Observability: include identifiers (e.g., <code>user_id</code>, <code>resource_id</code>, <code>action</code>) in INFO logs; provide <code>GET /healthz</code>; optionally metrics (requests/sec, error rate).</li><li>Schema evolution: prefer additive migrations; for breaking changes, ship one-off scripts and document the rollout.</li></ul><h2 id="development-guidelines" tabindex="-1">Development Guidelines <a class="header-anchor" href="#development-guidelines" aria-label="Permalink to &quot;Development Guidelines&quot;">​</a></h2><h3 id="for-developers" tabindex="-1">For Developers <a class="header-anchor" href="#for-developers" aria-label="Permalink to &quot;For Developers&quot;">​</a></h3><ul><li>Read this file first to understand relationships.</li><li>Follow existing patterns in code (handlers, services, modules) before adding new ones.</li><li>Keep flows cohesive; avoid leaking implementation detail across boundaries.</li><li>Add small, focused tests around the code you change.</li></ul><h3 id="for-architects-tech-leads" tabindex="-1">For Architects/Tech Leads <a class="header-anchor" href="#for-architects-tech-leads" aria-label="Permalink to &quot;For Architects/Tech Leads&quot;">​</a></h3><ul><li>Keep this doc accurate when adding/removing major components.</li><li>Focus on interactions (who talks to whom, and why), not how.</li><li>Update the data flow examples when user journeys change materially.</li><li>Document new integration points (APIs, tables, topics) in one line each.</li></ul><h2 id="how-not-to-use-this-file" tabindex="-1">How NOT to Use This File <a class="header-anchor" href="#how-not-to-use-this-file" aria-label="Permalink to &quot;How NOT to Use This File&quot;">​</a></h2><ul><li>Don’t duplicate code-level docs or function signatures here.</li><li>Don’t include long code examples; link to files instead.</li><li>Don’t turn this into a deployment guide; keep ops in separate docs.</li><li>Don’t let it bloat; if it takes &gt;3 pages, trim it.</li></ul><h2 id="red-flags" tabindex="-1">Red Flags <a class="header-anchor" href="#red-flags" aria-label="Permalink to &quot;Red Flags&quot;">​</a></h2><ul><li>If readers need this to understand basic function calls → code needs better naming.</li><li>If this explains “how to implement” instead of “what connects to what” → too detailed.</li><li>If every refactor requires updating this file → coupling is too tight.</li><li>If newcomers spend &gt;5 minutes reading this → it’s too verbose.</li></ul><h2 id="related-docs-placeholders" tabindex="-1">Related Docs (Placeholders) <a class="header-anchor" href="#related-docs-placeholders" aria-label="Permalink to &quot;Related Docs (Placeholders)&quot;">​</a></h2><ul><li>ROADMAP: <code>[docs/ROADMAP.md]</code></li><li>Task specs: <code>[comms/tasks/YYYY-MM-DD-*.md]</code></li><li>Ops/Deployment: <code>[docs/deployment.md]</code></li><li>ADRs (optional): <code>[docs/adr/0001-something.md]</code></li></ul><hr><p>Use this as your starting point for each new project. Keep it short, current, and focused on the architecture’s shape and interactions.</p>`,39)])])}const m=a(s,[["render",n]]);export{u as __pageData,m as default};
