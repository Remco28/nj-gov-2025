import{_ as t,c as o,o as a,ae as i}from"./chunks/framework.CBTkueSR.js";const h=JSON.parse('{"title":"Project Manifest Template","description":"","frontmatter":{},"headers":[],"relativePath":"project-manifest.template.md","filePath":"project-manifest.template.md"}'),r={name:"project-manifest.template.md"};function n(s,e,c,l,d,p){return a(),o("div",null,[...e[0]||(e[0]=[i('<h1 id="project-manifest-template" tabindex="-1">Project Manifest Template <a class="header-anchor" href="#project-manifest-template" aria-label="Permalink to &quot;Project Manifest Template&quot;">​</a></h1><p><strong>Purpose:</strong> This file acts as a &quot;map&quot; for an AI coding agent. It provides a stable set of pointers to critical project documentation and context, allowing the AI to quickly orient itself at the start of a new session.</p><p><strong>How to Use:</strong></p><ol><li>Copy this template to the root of your project and rename it to <code>project-manifest.md</code>.</li><li>Customize the file paths to match your project&#39;s structure.</li><li>Use this manifest as the foundation for your initial &quot;bootstrap prompt&quot; when starting a session with an AI.</li></ol><hr><h2 id="_1-core-identity-stable" tabindex="-1">1. Core Identity (Stable) <a class="header-anchor" href="#_1-core-identity-stable" aria-label="Permalink to &quot;1. Core Identity (Stable)&quot;">​</a></h2><p><em>These files define the project&#39;s high-level architecture, goals, and the roles of the participants. They should change infrequently.</em></p><ul><li><strong>Architecture:</strong> <code>docs/ARCHITECTURE.md</code></li><li><strong>Roadmap/Goals:</strong> <code>docs/ROADMAP.md</code></li></ul><h2 id="_2-dynamic-state-volatile" tabindex="-1">2. Dynamic State (Volatile) <a class="header-anchor" href="#_2-dynamic-state-volatile" aria-label="Permalink to &quot;2. Dynamic State (Volatile)&quot;">​</a></h2><p><em>These files and directories reflect the current status, recent work, and active tasks. The AI should check these to understand what&#39;s happening right now.</em></p><ul><li><strong>Activity Log:</strong> <code>comms/log.md</code></li><li><strong>Active Task Directory:</strong> <code>comms/tasks/</code> (Note: specs for completed tasks are typically moved to an <code>archive/</code> sub-directory).</li></ul><h2 id="_3-code-config-entrypoints" tabindex="-1">3. Code &amp; Config (Entrypoints) <a class="header-anchor" href="#_3-code-config-entrypoints" aria-label="Permalink to &quot;3. Code &amp; Config (Entrypoints)&quot;">​</a></h2><p><em>These are the primary technical entrypoints for understanding the application&#39;s structure, dependencies, and configuration.</em></p><ul><li><strong>Main Application:</strong> <code>src/main.py</code> or <code>app/main.js</code></li><li><strong>Dependencies:</strong> <code>requirements.txt</code> or <code>package.json</code></li><li><strong>Environment Configuration:</strong> <code>.env.example</code></li><li><strong>Database Schema:</strong> <code>src/models.py</code> or <code>prisma/schema.prisma</code></li><li><strong>API Routes:</strong> <code>src/routes/</code> or <code>app/api/</code></li></ul>',14)])])}const u=t(r,[["render",n]]);export{h as __pageData,u as default};
