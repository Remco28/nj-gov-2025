import{_ as a,c as t,o as s,ae as i}from"./chunks/framework.CBTkueSR.js";const h=JSON.parse('{"title":"Architecture Overview: Voter Decision Aid Website","description":"","frontmatter":{},"headers":[],"relativePath":"ARCHITECTURE.md","filePath":"ARCHITECTURE.md"}'),n={name:"ARCHITECTURE.md"};function o(r,e,l,c,d,p){return s(),t("div",null,[...e[0]||(e[0]=[i(`<h1 id="architecture-overview-voter-decision-aid-website" tabindex="-1">Architecture Overview: Voter Decision Aid Website <a class="header-anchor" href="#architecture-overview-voter-decision-aid-website" aria-label="Permalink to &quot;Architecture Overview: Voter Decision Aid Website&quot;">​</a></h1><p>A brief, 2-minute overview of the system. It&#39;s a static website built with VitePress, designed for an interactive, inquiry-driven exploration of political topics.</p><h2 id="system-components" tabindex="-1">System Components <a class="header-anchor" href="#system-components" aria-label="Permalink to &quot;System Components&quot;">​</a></h2><h3 id="core-services" tabindex="-1">Core Services <a class="header-anchor" href="#core-services" aria-label="Permalink to &quot;Core Services&quot;">​</a></h3><ul><li><strong>VitePress App</strong> (<code>/docs</code>) – A Static Site Generator (SSG) that builds the website from Markdown files. It uses Vue.js for interactive components.</li></ul><h3 id="supporting-services" tabindex="-1">Supporting Services <a class="header-anchor" href="#supporting-services" aria-label="Permalink to &quot;Supporting Services&quot;">​</a></h3><ul><li><strong>GitHub Actions</strong> – For continuous integration and deployment (CI/CD). It automatically builds the VitePress site and deploys it to GitHub Pages on push.</li></ul><h3 id="process-architecture" tabindex="-1">Process Architecture <a class="header-anchor" href="#process-architecture" aria-label="Permalink to &quot;Process Architecture&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(Development Workflow)</span></span>
<span class="line"><span>Human writes raw Markdown notes</span></span>
<span class="line"><span>       |</span></span>
<span class="line"><span>       v</span></span>
<span class="line"><span>AI Agent formats into structured Markdown w/ Frontmatter</span></span>
<span class="line"><span>       |</span></span>
<span class="line"><span>       v</span></span>
<span class="line"><span>Git Push triggers GitHub Actions</span></span>
<span class="line"><span>       |</span></span>
<span class="line"><span>       v</span></span>
<span class="line"><span>[VitePress Build Process] --reads--&gt; [Markdown Content (\`/docs\`)]</span></span>
<span class="line"><span>       |</span></span>
<span class="line"><span>       v</span></span>
<span class="line"><span>[Static Site (HTML/CSS/JS)] --deployed_to--&gt; [GitHub Pages]</span></span></code></pre></div><h2 id="data-flow-examples" tabindex="-1">Data Flow Examples <a class="header-anchor" href="#data-flow-examples" aria-label="Permalink to &quot;Data Flow Examples&quot;">​</a></h2><h3 id="example-user-interacts-with-a-candidate-claim" tabindex="-1">Example: User Interacts with a Candidate Claim <a class="header-anchor" href="#example-user-interacts-with-a-candidate-claim" aria-label="Permalink to &quot;Example: User Interacts with a Candidate Claim&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>User clicks candidate photo → Vue component triggers &quot;spinner&quot; → Random talking point is displayed in a speech bubble → User clicks bubble → Vue component loads claim data from Markdown frontmatter → Modal displays with nested, clickable questions.</span></span></code></pre></div><h3 id="example-content-update" tabindex="-1">Example: Content Update <a class="header-anchor" href="#example-content-update" aria-label="Permalink to &quot;Example: Content Update&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Developer adds/edits a &quot;user-friendly&quot; Markdown file → AI Agent converts it to a &quot;site-ready&quot; structured Markdown file → Developer commits and pushes to GitHub → GitHub Actions builds and deploys the new content.</span></span></code></pre></div><h2 id="key-abstractions" tabindex="-1">Key Abstractions <a class="header-anchor" href="#key-abstractions" aria-label="Permalink to &quot;Key Abstractions&quot;">​</a></h2><ul><li><strong>Entities</strong>: Candidate, Talking Point (Claim), Question, Answer, Side Fact. These are structured in Markdown frontmatter.</li><li><strong>Boundaries</strong>: The primary boundary is the static site itself, consumed by users in a browser. The content update process is a development-time boundary.</li></ul><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><ul><li><strong>VitePress Config</strong>: <code>docs/.vitepress/config.js</code> will contain site-level configuration, navigation, and SPA settings.</li><li><strong>Content Config</strong>: YAML frontmatter within Markdown files (<code>.md</code>) will configure the content for each page and claim.</li></ul><h2 id="integration-points" tabindex="-1">Integration Points <a class="header-anchor" href="#integration-points" aria-label="Permalink to &quot;Integration Points&quot;">​</a></h2><ul><li><strong>Content Source</strong>: All content is sourced from local Markdown files within the <code>/docs</code> directory.</li><li><strong>Deployment</strong>: GitHub Pages hosts the static output.</li></ul><h2 id="runtime-operations-notes" tabindex="-1">Runtime &amp; Operations Notes <a class="header-anchor" href="#runtime-operations-notes" aria-label="Permalink to &quot;Runtime &amp; Operations Notes&quot;">​</a></h2><ul><li><strong>Static Site</strong>: There is no server-side runtime. The entire application is pre-built into static files.</li><li><strong>Development</strong>: A local dev server is run via <code>npm run dev</code>.</li><li><strong>Security</strong>: As a static site, the attack surface is minimal. Source citation is important for content integrity.</li></ul><h2 id="related-docs" tabindex="-1">Related Docs <a class="header-anchor" href="#related-docs" aria-label="Permalink to &quot;Related Docs&quot;">​</a></h2><ul><li>Project Plan: <code>comms/planning-overview.md</code></li><li>Next Steps: <code>NEXT_STEPS.md</code></li><li>Task Specs: <code>comms/tasks/</code></li></ul>`,24)])])}const m=a(n,[["render",o]]);export{h as __pageData,m as default};
